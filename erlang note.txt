一、erlang基础
	1、整数
		（1）最大最小无上下限
		（2）Base#Value用于表示基数为Base（介于2~16的整数）的整数值Value。
			如：2#1010（10） -16#EA（-234）
		（3）$Character表示字符的ASCII值
			如：$a(97)  $A(65) $\n(10)
	2、浮点数
		用来表示实数。
			可用1.234E-10 表示1.234*10(^-10)
	3、算术运算符
			类型	描述			数据类型
			+		一元操作符+		整数 | 浮点数
			-		一元操作符-		整数 | 浮点数
			*		乘法			整数 | 浮点数
			/		除法			整数 | 浮点数
			div		整数除法		整数
			rem		整数取余		整数
			+		加法			整数 | 浮点数
			-		减法			整数 | 浮点数
		所有的运算都是左结合。上表已列出优先级。可用（）改变优先级
	4、基元
		（1）基元表示文字常量
		（2）基元唯一可用的操作：比较
		（3）基元由小写字母开始或是由单引号界定
			小写字母开始：可用字符有：字母、数字、@、.、_。
			单引号界定：可用所有字符。
	5、布尔类型
		（1）没有单独表示布尔类型的布尔值或者字符。基元true和false与布尔操作符一起使用，
			本身而不是布尔类型，它们用来表示测试的布尔返回值。多用于比较操作
				如：1 ==2. -> false 
					1 < 2. -> true
		（2）基元按照字典顺序排序。
				如：less < more. -> true
		（3）可用内置函数is_boolean来测试一个Erlang值是否为布尔类型
				如：is_boolean(9+6). -> false
					is_boolean(1 == 2). ->true
	6、逻辑运算符
			运算		描述
			and			如果两个参数都为真，则返回真
			andalso		如果第一个参数为假，则返回假，不需要计算第二个参数
			or			如果两个参数的任何一个为真，则返回真
			orelse		如果第一个参数为真，则返回真，不需要计算第二个参数
			xor			异或：两个参数一假一真，则返回真
			not   		一元否定运算符：如果参数是假，则返回真，反之亦然。
		（1）逻辑运算符置于参数之前或者两个参数之间
		（2）两个参数最好都用圆括号括起来
			如：not((1<3)) and (2 == 2). -> false
				not((1<3)  xor (2 == 2). -> true
				
	7、元组（tuple）
		（1）用来保存一组数据元素的复合数据类型
		（2）数据元素要求是Erlang数据类型，但不一定是相同的类型
				这意味着元组内可以有元组
		（3）元组用封闭的花括号{...}来定义，元素由逗号隔开
			如：{abc,{def,123},ghi}
		（4）当一个元组的第一个元素是一个基元时，称它为标记(tag)。
			如：元组{person,'Joe','Armstrong'}中，基元person时标记
		（5）有关元组的内置函数：
			tuple_size(元组):返回元组的大小
			element(n,元组)：返回元组指定位置n的元素（元组中的元素索引是从1开始的）
			setelement(n,元组,元素)：设置元组指定位置n的元素为新的元素
				如：tuple_size({abc,{def,123},ghi}). -> 3
					element(2,{abc,{def,123},ghi}). -> {def,123}
					setelement(2,{abc,{def,123},ghi},def). -> {abc,def,ghi}
	8、列表（List）
		（1）用于存储元素集合
		（2）元素可以是不同类型，数目可以是任意的
				这意味着列表内可以有列表
		（3）列表用封闭的方括号[...]来定义，元素由逗号隔开
		（4）元组的处理只能是提取具体元素，而列表只要不为空，就可以把一个列表分成头部和尾部
		（5）列表的组成：
			列表的头部是指列表的第一个元素，它的尾部是一个包含所有剩余元素的
			一个列表，而这个列表可以继续这样分解下去（列表的递归定义）
			如果最后一个尾部项是一个空列表，那么这是一个正确的或者结构良好的列表。
			List = [Element | List] or []
			  ↑					|
			  |_________________| 	
			  
			 如： [1,2,3]
				 =[1|[2,3]]
				 =[1|[2|[3]]
				 =[1|[2|[3|[]]]]
		（6）列表的操作：列表结合元组一起使用可以表示各种复杂的数据结构。
				① 列表的很多操作的定义在lists库模块下（length是内置函数）：
					lists:max(list):返回list的最大值
					lists:reverse(list):返回list的倒序列
					lists:sort(list):返回list从小到大排序的结果
					lists:split(n,list):返回从第n个位置将list分成两个列表组成的元组
					lists:sum(list):返回list的求和结果
					lists:zip(list1,list2):返回两个list一一对应组成的元组的列表
					lists:delete(n,list):删除list中第n个位置的元素
					lists:last(list):返回list的最后一个元素
					lists:member(value,list):判断value是不是list里面的元素
					lists:nth(n,list):返回list中第n个元素
					length(list):返回list的长度
						如：lists:split(2,[3,4,10,7,9]). -> {[3,4],[10,7,9]}
							lists:zip([1,2,3],[5,6,7]). -> [{1,5},{2,6},{3,7}]
				② 三个操作符：
					[...|...]:列表的递归定义,构造器
					++：把两个列表相连成一个新的列表。
						如：[1.2] ++ [3,4]. -> [1,2,3,4]
					--：把列表中的每个元素从左边的列表中减去，如果元素不存在则忽略
						如：[1,1,2,3,4] -- [1,2,5]. -> [1,3,4]
					注意：A：++和--操作符的运算顺序是右结合的。
							如：[1,2,3]--[1,3]--[1,2]. -> [1,2]
						  B：当输入n个字符串而未结束时，会组合成一个新的字符串。
							如："Hello" "World". -> "Hello World"
						  C：在一个列表前添加一个元素，有两种方法：
								a.直接使用构造器，例如 [1|[2,3,4]]	（效率高）
								b.使用++运算符，例如 [1] ++ [2,3,4]	（效率低）
						
						
	9、字符和字符串
		（1）字符由整数表示，字符串则由整数列来表示
		（2）字符的整数值可在字母前加$符号来获取。
		（3）Erlang中没有字符串数据类型。
			在Erlang中，字符串是由ASCII值组成的整数列表，并使用双引号""来表示
				如：[65,66,67]. -> "ABC"
					[]. -> ""
					[$H,$e,$l,$l,$o,$,$W,$o,$r,$l,$d]. -> "Hello World"
		（4）基元和字符串的区别：
			① 处理方式不同：
				基元可执行的唯一操作是比较
				而字符串可以分解成不同的列表
			② 效率不同：
				字符串所占用的空间与字符串大小成正比
					当程序比较两个字符串时，需遍历每个字符来比较大小
				基元在系统表中表示，仅仅需要几个字节用作索引，与它大小无关
					当程序对基元进行比较时，只需比较它们的内部标志即可
			